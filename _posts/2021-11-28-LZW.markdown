---
layout: post
title: LZWÁÆóÊ≥ï
categories: ÁÆóÊ≥ï‰∏éÂà∑È¢ò
tags: ‰ø°Âè∑
---

```c++
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
using namespace std;

int main()
{

	string iniSequence;
	cin >> iniSequence;
	string waitToOut = "";
	vector<string> senderASCII(256, "");

	int length = iniSequence.size();

	vector<int> LZWout;
	senderASCII[97] = "a";
	senderASCII[98] = "b";
	senderASCII[99] = "c";
	senderASCII[100] = "d";
	senderASCII[255] = "zEND";
	cout << "----------------------------ÂèëÈÄÅÁ´Ø--------------------------" << endl;
	int i = 0;
	string temp = "";
	while (i != length)
	{
		temp = waitToOut + iniSequence[i]; // S+c
		vector<string>::iterator tempPointer = find(senderASCII.begin(), senderASCII.end(), temp);
		if (tempPointer != senderASCII.end()) //Âú®Â≠óÂÖ∏‰∏≠
		{
			waitToOut = temp;
		}
		else
		{
			vector<string>::iterator sPointer = find(senderASCII.begin(), senderASCII.end(), waitToOut);
			int sASCII = distance(senderASCII.begin(), sPointer);
			LZWout.push_back(sASCII);
			cout << sASCII << endl;     //ÂèëÈÄÅSÁöÑÁºñÁ†Å
			senderASCII.push_back(temp);   // S+cÂä†ÂÖ•Â≠óÁ¨¶‰∏≤Ë°®
			waitToOut = iniSequence[i]; // S=c
		}
		i++;
	}
	vector<string>::iterator leftPointer = find(senderASCII.begin(), senderASCII.end(), waitToOut);
	int leftS = distance(senderASCII.begin(), leftPointer);
	LZWout.push_back(leftS);
	cout << leftS << endl;     //ÂèëÈÄÅSÁöÑÁºñÁ†Å
	cout << "----------------------------Êé•Êî∂Á´Ø--------------------------" << endl;
	//Êé•Êî∂Á´Ø
	vector<string> receiveASCII(256, "");
	receiveASCII[97] = "a";
	receiveASCII[98] = "b";
	receiveASCII[99] = "c";
	receiveASCII[100] = "d";
	receiveASCII[255] = "zEND";

	vector<string> LZWdecode;
	LZWdecode.push_back(receiveASCII[LZWout[0]]);
	cout << receiveASCII[LZWout[0]] << endl;
	int j = 1;
	int len = LZWout.size();
	int receiveASCIILength = receiveASCII.size();

	char pastFirstWord = receiveASCII[LZWout[0]][0];
	string pastWord = receiveASCII[LZWout[0]];
	char currentFirstWord;
	string currentWord;
	while (j != len)
	{
		if (LZWout[j] < receiveASCIILength)//codeÂú®Â≠óÂÖ∏‰∏≠
		{
			LZWdecode.push_back(receiveASCII[LZWout[j]]);
			cout << receiveASCII[LZWout[j]] << endl;
			currentFirstWord = receiveASCII[LZWout[j]][0];
			currentWord = receiveASCII[LZWout[j]];
		}
		else
		{
			currentWord = pastWord + pastFirstWord;
			currentFirstWord = currentWord[0];
			LZWdecode.push_back(currentWord);
			cout << currentWord << endl;
		}
		receiveASCII.push_back(pastWord+currentFirstWord);

		pastWord = currentWord;
		pastFirstWord = currentFirstWord;
		j++;
		receiveASCIILength = receiveASCII.size();
	}



	system("pause");
	return 0;
}
```





Âà§Êñ≠„ÄêÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó+ÂΩìÂâçÁ¨¶Âè∑„ÄëÊòØÂê¶Âú®Â≠óÁ¨¶‰∏≤Ë°®‰∏≠

```c++
ÂΩìÂâçÁ¨¶Âè∑ÊòØÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶Ôºõ
do{
    if(„ÄêÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó+ÂΩìÂâçÁ¨¶Âè∑„ÄëÂú®Â≠óÁ¨¶Ë°®‰∏≠)
    {
    	ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó=ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó+ÂΩìÂâçÁ¨¶Âè∑Ôºõ
    }
else
    {
        Â∞Ü„ÄêÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó+ÂΩìÂâçÁ¨¶Âè∑„ÄëÂä†ÂÖ•Â≠óÁ¨¶Ë°®
        ËæìÂá∫ „ÄêÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó„Äë
        ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó=ÂΩìÂâçÁ¨¶Âè∑Ôºõ
    }
    ÂΩìÂâçÁ¨¶Âè∑ÊåáÂêë‰∏ã‰∏Ä‰ΩçÔºõ
}while(Â≠óÁ¨¶‰∏≤ËØªÂèñÂÆåÊØï)
    ËæìÂá∫„ÄêÂâ©‰ΩôÂ≠óÁ¨¶„ÄëÔºõ

```

‰æãÂ≠êÔºöabab

Â≠óÁ¨¶Ë°®Áä∂ÊÄÅÊîπÂèòÊµÅÁ®ã

| Â≠óÁ¨¶‰∏≤           | a    | b    | a    | b    |
| ---------------- | ---- | ---- | ---- | ---- |
| ÂΩìÂâçÁ¨¶Âè∑         | üëÜ    |      |      |      |
| ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó | null |      |      |      |
| Â≠óÁ¨¶‰∏≤           | a    | b    | a    | b    |
| ---------------- | ---- | ---- | ---- | ---- |
| ÂΩìÂâçÁ¨¶Âè∑         | üëÜ    |      |      |      |
| ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó | a    |      |      |      |



| Â≠óÁ¨¶‰∏≤           | a    | b    | a    | b    |
| ---------------- | ---- | ---- | ---- | ---- |
| ÂΩìÂâçÁ¨¶Âè∑         |      | üëÜ    |      |      |
| ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó | a    |      |      |      |



| Â≠óÁ¨¶                   | ASCIIÁ†ÅÔºàÂçÅËøõÂà∂Ôºâ |
| ---------------------- | ----------------- |
| NUL(null)              | 0                 |
| SOH(start of headline) | 1                 |
| STX (start of text)    | 2                 |
|                        | ...               |
| A                      | 65                |
| B                      | B                 |
| C                      | C                 |
|                        | ...               |
| a                      | 97                |
| b                      | 98                |
| c                      | 99                |
|                        | ...               |
|                        | 255               |








| B    | A    | B    | A    | A    | B    | A    | A    | A    |
| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |
|      |      |      |      |      |      |      |      |      |

| Â≠óÁ¨¶‰∏≤           | B    | A    | B    | A    | A    | B    | A    | A    | A    |
| ---------------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |
| ÂΩìÂâçÂ≠óÁ¨¶         | üëÜ    |      |      |      |      |      |      |      |      |
| ÂΩìÂâçÂæÖËæìÂá∫Â≠êÂ∫èÂàó |      |      |      |      |      |      |      |      |      |
|                  |      |      |      |      |      |      |      |      |      |

Áª¥Êä§‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Ë°®

| Â≠óÁ¨¶                   | ASCIIÁ†ÅÔºàÂçÅËøõÂà∂Ôºâ |
| ---------------------- | ----------------- |
| NUL(null)              | 0                 |
| SOH(start of headline) | 1                 |
| STX (start of text)    | 2                 |
|                        | ...               |
| 65                     | A                 |
| 66                     | B                 |
| 67                     | C                 |
|                        | ...               |
|                        | 255               |

abcabcabcabcabcabca





